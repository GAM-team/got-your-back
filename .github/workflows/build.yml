name: Build and test GYB

permissions:
  id-token: write
  attestations: write
  contents: read

on:
  push:
  pull_request:
  schedule:
    - cron: '37 22 * * *'

defaults:
  run:
    shell: bash

env:
  OPENSSL_CONFIG_OPTS: no-fips --api=3.0.0
  OPENSSL_INSTALL_PATH: ${{ github.workspace }}/ssl
  OPENSSL_SOURCE_PATH: ${{ github.workspace }}/openssl
  PYTHON_INSTALL_PATH: ${{ github.workspace }}/python
  PYTHON_SOURCE_PATH: ${{ github.workspace }}/cpython
  WINDOWS_CODESIGN_CERT_HASH: 590dc5bb10dfb31dbff38c0e2f9c35ef0f6d0e9e

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            jid: 1
            goal: build
            arch: x86_64
          - os: ubuntu-22.04
            jid: 2
            goal: build
            arch: x86_64
            staticx: yes
          - os: macos-13
            jid: 3
            goal: build
            arch: x86_64
          - os: macos-14
            jid: 4
            goal: build
            arch: aarch64
          - os: windows-2022
            jid: 5
            goal: build
            arch: Win64
          - os: ubuntu-22.04-arm
            jid: 6
            goal: build
            arch: aarch64
          - os: ubuntu-22.04-arm
            jid: 7
            goal: build
            arch: aarch64
            staticx: yes
          - os: ubuntu-24.04
            goal: test
            python: "3.9"
            jid: 8
          - os: ubuntu-24.04
            goal: test
            python: "3.10"
            jid: 9
          - os: ubuntu-24.04
            goal: test
            python: "3.11"
            jid: 10
          - os: ubuntu-24.04
            goal: test
            python: "3.13"
            jid: 11

    steps:
      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Cache the build
        if: matrix.goal == 'build'
        id: cache-python-ssl
        uses: actions/cache@v4
        with:
          path: |
            cache.tar.xz
          key: ${{ matrix.jid }}-2025-08.14

      - name: Untar Cache archive
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit == 'true'
        working-directory: ${{ github.workspace }}
        run: |
          tar xvvf cache.tar.xz

      - name: Use pre-compiled Python
        if: matrix.python != ''
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          allow-prereleases: true

      - name: Set env variables for test
        if: matrix.goal == 'test'
        env:
          JID: ${{ matrix.jid }}
          ACTIONS_CACHE: ${{ steps.cache-python-ssl.outputs.cache-hit }}
          ACTIONS_GOAL: ${{ matrix.goal }}
        run: |
             export PYTHON=$(which python3)
             export gyb="${PYTHON} -m gyb"
             export gybpath="$(readlink -e .)"
             echo -e "PYTHON: ${PYTHON}\nPIP: ${PIP}\ngyb: ${gyb}\ngybpath: ${gybpath}"
             echo "PYTHON=${PYTHON}" >> $GITHUB_ENV
             echo "gyb=${gyb}" >> $GITHUB_ENV
             echo "gybpath=${gybpath}" >> $GITHUB_ENV
             echo "JID=${JID}" >> $GITHUB_ENV
             echo "ACTIONS_CACHE=${ACTIONS_CACHE}" >> $GITHUB_ENV
             echo "ACTIONS_GOAL=${ACTIONS_GOAL}" >> $GITHUB_ENV

      - name: Set Env Variables for build
        if: matrix.goal == 'build'
        env:
          arch: ${{ matrix.arch }}
          jid: ${{ matrix.jid }}
          staticx: ${{ matrix.staticx }}
        run: |
          echo "We are running on ${RUNNER_OS}"
          if [[ "${arch}" == "Win64" ]]; then
            PYEXTERNALS_PATH="amd64"
            PYBUILDRELEASE_ARCH="x64"
            OPENSSL_CONFIG_TARGET="VC-WIN64A"
            CHOC_OPS=""
          elif [[ "${arch}" == "Win32" ]]; then
            PYEXTERNALS_PATH="win32"
            PYBUILDRELEASE_ARCH="Win32"
            OPENSSL_CONFIG_TARGET="VC-WIN32"
            CHOC_OPS="--forcex86"
          fi
          if [[ "${RUNNER_OS}" == "macOS" ]]; then
            MAKE=make
            OS=macos
            MAKEOPT="-j$(sysctl -n hw.logicalcpu)"
            PERL=perl
            # We only care about non-deprecated OSes
            MACOSX_DEPLOYMENT_TARGET="10.15"
            echo "MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET}" >> $GITHUB_ENV
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
          elif [[ "${RUNNER_OS}" == "Linux" ]]; then
            MAKE=make
            OS=linux
            MAKEOPT="-j$(nproc)"
            PERL=perl
            echo "PYTHON=${PYTHON_INSTALL_PATH}/bin/python3" >> $GITHUB_ENV
          elif [[ "${RUNNER_OS}" == "Windows" ]]; then
            MAKE=nmake
            OS=windows
            MAKEOPT=""
            PERL="c:\strawberry\perl\bin\perl.exe"
            echo "PYTHON=${PYTHON_SOURCE_PATH}/PCbuild/${PYEXTERNALS_PATH}/python.exe" >> $GITHUB_ENV
          fi
          echo "We'll run make with: ${MAKEOPT}"
          echo "JID=${jid}" >> $GITHUB_ENV
          echo "OS=${OS}" >> $GITHUB_ENV
          echo "arch=${arch}" >> $GITHUB_ENV
          echo "staticx=${staticx}" >> $GITHUB_ENV
          echo "MAKE=${MAKE}" >> $GITHUB_ENV
          echo "MAKEOPT=${MAKEOPT}" >> $GITHUB_ENV
          echo "PERL=${PERL}" >> $GITHUB_ENV
          echo "PYEXTERNALS_PATH=${PYEXTERNALS_PATH}" >> $GITHUB_ENV
          echo "PYBUILDRELEASE_ARCH=${PYBUILDRELEASE_ARCH}" >> $GITHUB_ENV
          echo "OPENSSL_CONFIG_TARGET=${OPENSSL_CONFIG_TARGET}" >> $GITHUB_ENV
          echo "CHOC_OPS=${CHOC_OPS}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_PATH}/lib:${PYTHON_INSTALL_PATH}/lib:/usr/local/lib" >> $GITHUB_ENV

      - name: MacOS import developer certificates for signing
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@95e84a1a18f2bdbc5c6ab9b7f4429372e4b13a8b # 5.0.3
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Get latest stable OpenSSL source
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/openssl/openssl.git
          cd "${OPENSSL_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list openssl-* | grep -v alpha | grep -v beta | sort -Vr | head -n1)
          echo "Checking out version ${LATEST_STABLE_TAG}"
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_OPENSSL_VERSION=${LATEST_STABLE_TAG:8} # Trim the openssl- prefix
          echo "COMPILED_OPENSSL_VERSION=${COMPILED_OPENSSL_VERSION}" >> $GITHUB_ENV

      - name: Windows Configure VCode
        uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-2022' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        with:
          arch: ${{ matrix.arch }}

      - name: Windows Choco Packages Install
        if: runner.os == 'Windows'
        run: |
          choco install sqlite $CHOC_OPS

      - name: Windows NASM Install
        uses: ilammy/setup-nasm@v1
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'

      - name: Config OpenSSL
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # --libdir=lib is needed so Python can find OpenSSL libraries
          "${PERL}" ./Configure "${OPENSSL_CONFIG_TARGET}" --libdir=lib --prefix="${OPENSSL_INSTALL_PATH}" $OPENSSL_CONFIG_OPTS

      - name: Rename GNU link on Windows
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: bash
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          $MAKE "${MAKEOPT}"

      - name: Install OpenSSL
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_PATH}"
          # install_sw saves us ages processing man pages :-)
          $MAKE install_sw

      - name: Run OpenSSL
        if: matrix.goal == 'build'
        run: |
          "${OPENSSL_INSTALL_PATH}/bin/openssl" version

      - name: Get latest stable Python source
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/python/cpython.git
          cd "${PYTHON_SOURCE_PATH}"
          export LATEST_STABLE_TAG=$(git tag --list | grep -v a | grep -v rc | grep -v b | sort -Vr | head -n1)
          git checkout "${LATEST_STABLE_TAG}"
          export COMPILED_PYTHON_VERSION=${LATEST_STABLE_TAG:1} # Trim the "v" prefix
          echo "COMPILED_PYTHON_VERSION=${COMPILED_PYTHON_VERSION}" >> $GITHUB_ENV

      - name: Mac/Linux Configure Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          ./configure --with-openssl="${OPENSSL_INSTALL_PATH}" \
                      --prefix="${PYTHON_INSTALL_PATH}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Windows Get External Python deps
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          PCBuild\get_externals.bat

      - name: Windows overwrite external OpenSSL with local
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          $env:OPENSSL_EXT_PATH = "$(Get-Item externals\openssl-bin-* | Select -exp FullName)\"
          echo "External OpenSSL was downloaded to ${env:OPENSSL_EXT_PATH}"
          Remove-Item -recurse -force "${env:OPENSSL_EXT_PATH}*"
          # Emulate what this script does:
          # https://github.com/python/cpython/blob/main/PCbuild/openssl.vcxproj
          $env:OPENSSL_EXT_TARGET_PATH = "${env:OPENSSL_EXT_PATH}${env:PYEXTERNALS_PATH}"
          echo "Copying our OpenSSL to ${env:OPENSSL_EXT_TARGET_PATH}"
          mkdir "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          Copy-Item -Path "${env:OPENSSL_SOURCE_PATH}\LICENSE.txt" -Destination "${env:OPENSSL_EXT_TARGET_PATH}\LICENSE" -verbose
          cp "$env:OPENSSL_INSTALL_PATH\lib\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp "$env:OPENSSL_INSTALL_PATH\bin\*" "${env:OPENSSL_EXT_TARGET_PATH}"
          cp "$env:OPENSSL_INSTALL_PATH\include\openssl\*" "${env:OPENSSL_EXT_TARGET_PATH}\include\openssl\"
          cp "$env:OPENSSL_INSTALL_PATH\include\openssl\applink.c" "${env:OPENSSL_EXT_TARGET_PATH}\include\"

      - name: Windows Install sphinx-build
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          pip install --upgrade pip
          pip install --upgrade sphinx
          sphinx-build --version

      - name: Windows Config/Build Python
        if: matrix.goal == 'build' && runner.os == 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd "${env:PYTHON_SOURCE_PATH}"
          # We need out custom openssl.props which uses OpenSSL 3 DLL names
          Copy-Item -Path "${env:GITHUB_WORKSPACE}\openssl.props" -Destination PCBuild\ -verbose
          echo "Building for ${env:PYBUILDRELEASE_ARCH}..."
          PCBuild\build.bat -m --pgo -c Release -p "${env:PYBUILDRELEASE_ARCH}"

      - name: Mac/Linux Build Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          echo "Running: ${MAKE} ${MAKEOPT}"
          $MAKE $MAKEOPT

      - name: Mac/Linux Install Python
        if: matrix.goal == 'build' && runner.os != 'Windows' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_PATH}"
          $MAKE altinstall
          $MAKE bininstall

      - name: Run Python
        run: |
          "${PYTHON}" -V

      - name: Upgrade pip, wheel, etc
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${PYTHON}" get-pip.py
          "${PYTHON}" -m pip install --upgrade pip
          "${PYTHON}" -m pip install --upgrade wheel
          "${PYTHON}" -m pip install --upgrade setuptools

      - name: Install pip requirements
        run: |
             set +e
             outdated=$("$PYTHON" -m pip list --outdated | grep -v 'Package' | grep -v '\-\-\-' | cut -d ' ' -f 1)
             "$PYTHON" -m pip install --upgrade --force-reinstall "$outdated"
             "$PYTHON" -m pip install --upgrade -r requirements.txt

      - name: Install PyInstaller
        if: matrix.goal == 'build'
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git
          cd pyinstaller
          export latest_release=$(git tag --list | grep -v dev | grep -v rc | sort -Vr | head -n1)
          echo $latest_release
          git checkout "${latest_release}"
          # remove pre-compiled bootloaders so we fail if bootloader compile fails
          rm -rf PyInstaller/bootloader/*-*/*
          cd bootloader
          if [[ "${arch}" == "Win64" ]]; then
            export PYINSTALLER_BUILD_ARGS="--target-arch=64bit"
          fi
          echo "PyInstaller build arguments: ${PYINSTALLER_BUILD_ARGS}"
          "${PYTHON}" ./waf all $PYINSTALLER_BUILD_ARGS
          cd ..
          "${PYTHON}" -m pip install .
          "${PYTHON}" -m PyInstaller --version

      - name: Build GYB with PyInstaller
        if: matrix.goal == 'build'
        run: |
             if [[ "${RUNNER_OS}" == "macOS" ]]; then
               # Tell our spec to use our code sign certificate
               export codesign_identity="Jay Lee"
             fi
             "${PYTHON}" -m PyInstaller --clean --distpath=gyb gyb.spec
             if [ -x "$(command -v realpath)" ]; then
               realpath=realpath
             else
               brew install coreutils
               realpath=grealpath
             fi
             echo "gybpath=$(${realpath} ./gyb/)" >> $GITHUB_ENV
             gyb=$(${realpath} ./gyb/gyb)
             if [[ "${RUNNER_OS}" == "Windows" ]]; then
               gyb=$(cygpath -w "$gyb")
             fi
             echo "gyb=${gyb}" >> $GITHUB_ENV
             echo -e "GYB: ${gyb}\nGYBPATH: ${gybpath}"

      - name: Linux install patchelf/staticx
        if: matrix.staticx == 'yes'
        run: |
          sudo apt-get -qq --yes update
          # arm64 needs to build a wheel and needs scons to build
          sudo apt-get -qq --yes install scons
          "${PYTHON}" -m pip install --upgrade patchelf-wrapper
          "${PYTHON}" -m pip install --upgrade staticx

      - name: Linux Make Static GYB
        if: matrix.staticx == 'yes'
        run: |
          case $RUNNER_ARCH in
            X64)
              ldlib=/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
              ;;
            ARM64)
              ldlib=/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
              ;;
          esac
          echo "ldlib=${ldlib}"
          $PYTHON -m staticx -l "${ldlib}" gyb/gyb gyb/gyb-staticx

      - name: Install WinAppDriver
        if: runner.os == 'Windows'
        run: |
          choco install -y winappdriver

      - name: Enabled dev mode for WinAppDriver
        if: runner.os == 'Windows'
        shell: cmd
        run : |
         reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"

      - name: Install appium and totp tools
        if: runner.os == 'Windows'
        run: |
          echo "Installing appium..."
          npm install -g appium
          echo "Installing totp-generator..."
          npm install "totp-generator"
          echo "Installing wdio..."
          npm install @wdio/cli
          echo "Installing appium win driver..."
          appium driver install windows

      - name: Install Certum MSI
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $url = "https://files.certum.eu/software/SimplySignDesktop/Windows/9.3.2.67/SimplySignDesktop-9.3.2.67-64-bit-en.msi"
          $file = "SimplySignDesktop-9.3.2.67-64-bit-en.msi"
          Invoke-WebRequest $url -OutFile $file
          $log = "install.log" 
          $procMain = Start-Process "msiexec" "/i `"$file`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
          $procLog = Start-Process "powershell" "Get-Content -Path `"$log`" -Wait" -NoNewWindow -PassThru 
          $procMain.WaitForExit() 
          $procLog.Kill()

      - name: Login to Certum
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          TOTP_SECRET: ${{ secrets.TOTP_SECRET }}
        run: |
          # disable win private firewall that interferes with appium server
          Set-NetFirewallProfile -Profile Private -Enabled False
          $appiumCmd = Get-Command appium
          $appiumPath = $appiumCmd.Path
          Start-Process -Filepath "powershell.exe" -ArgumentList "-File", $appiumPath, "--address", "127.0.0.1", "--log-level", "error"
          Start-Sleep -Seconds 10
          write-host "appium started"
          write-host "running SimplySignDesktop login..."
          node tools/ssd.mjs --log-level warn
          write-host "sleeping during login..."
          Start-Sleep 10

      - name: Sign gyb.exe
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          write-Host "Signing ${env:gyb}...."
          # Always explicitely use x64 version os signtool.exe, arm64 version apparently can't
          # see Certum certs since SimplySignDesktop is x64-only today.
          Start-Process -Wait -NoNewWindow -ErrorAction Continue -FilePath 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe'  -ArgumentList "sign", "/sha1", "590dc5bb10dfb31dbff38c0e2f9c35ef0f6d0e9e", "/tr", "http://time.certum.pl", "/td", "SHA256", "/fd", "SHA256", "/v", "$env:gyb"
          write-Host "Verifying signature of ${env:gyb}...."
          # verify signature. If we failed to sign we should fail to verify and die.
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe' verify /pa /v "$env:gyb"

      - name: Attest Binary Provenance
        uses: actions/attest-build-provenance@v1
        if: matrix.goal == 'build'
        with:
          subject-path: ${{ env.gyb }}

      - name: Basic Tests all jobs
        run: |
             echo -e "PYTHON: $PYTHON\ngyb: $gyb\ngybpath: $gybpath\n"
             touch "${gybpath}/nobrowser.txt"
             $gyb --version
             export GYBVERSION=$($gyb --short-version )
             echo "GYB Version ${GYBVERSION}"
             echo "GYBVERSION=${GYBVERSION}" >> $GITHUB_ENV
             if [ -d "gyb" ]; then
               cp LICENSE gyb/
             fi
             rm -f "${gybpath}/nobrowser.txt"
             rm -f "${gybpath}/lastcheck.txt"

      - name: Linux package GYB
        if: runner.os == 'Linux' && matrix.goal == 'build'
        run: |
          if [[ "${staticx}" == "yes" ]]; then
            this_glibc_ver="legacy"
          else
            this_glibc_ver=glibc$(ldd --version | awk '/ldd/{print $NF}')
          fi
          GYB_ARCHIVE="gyb-${GYBVERSION}-linux-$(arch)-${this_glibc_ver}.tar.xz"
          tar cfJ $GYB_ARCHIVE gyb/

      - name: MacOS package GYB
        if: runner.os == 'macOS' && matrix.goal == 'build'
        run: |
          MACOSVERSION=$(defaults read loginwindow SystemVersionStampAsString)
          GYB_ARCHIVE="gyb-${GYBVERSION}-macos-${arch}.tar.xz"
          tar cfJ $GYB_ARCHIVE gyb/

      - name: Windows package GYB
        if: runner.os == 'Windows' && matrix.goal == 'build'
        run: |
          cp gyb-setup.bat gyb
          GYB_ARCHIVE=gyb-$GYBVERSION-windows-x86_64.zip
          /c/Program\ Files/7-Zip/7z.exe a -tzip $GYB_ARCHIVE gyb -xr!.svn
          export MSI_FILENAME="${GITHUB_WORKSPACE}/gyb-${GYBVERSION}-windows-x86_64.msi"
          mkdir gyb-64
          cp -rf gyb/* gyb-64/;
          /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.14/bin/candle.exe -arch x64 windows-gyb.wxs
          /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.14/bin/light.exe -ext /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.14/bin/WixUIExtension.dll windows-gyb.wixobj -o "$MSI_FILENAME" || true;
          rm -f *.wixpdb
          echo "MSI_FILENAME=${MSI_FILENAME}" >> $GITHUB_ENV

      - name: Sign GYB MSI
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          write-Host "Signing ${env:MSI_FILENAME}...."
          # Always explicitely use x64 version os signtool.exe, arm64 version apparently can't
          # see Certum certs since SimplySignDesktop is x64-only today.
          Start-Process -Wait -NoNewWindow -ErrorAction Continue -FilePath 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe'  -ArgumentList "sign", "/sha1", "590dc5bb10dfb31dbff38c0e2f9c35ef0f6d0e9e", "/tr", "http://time.certum.pl", "/td", "SHA256", "/fd", "SHA256", "/v", "$env:MSI_FILENAME"
          write-Host "Verifying signature of ${env:MSI_FILENAME}...."
          # verify signature. If we failed to sign we should fail to verify and die.
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\signtool.exe' verify /pa /v "$env:MSI_FILENAME"

      - name: Attest Build Archive Provenance
        uses: actions/attest-build-provenance@v1
        if: (github.event_name == 'push' || github.event_name == 'schedule') && matrix.goal == 'build'
        with:
          subject-path: |
            gyb*.tar.xz
            gyb*.zip
            gyb*.msi

      - name: Basic Tests build jobs only
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        run: |
          export voutput=$($gyb --version)
          export python_line=$(echo -e "${voutput}" | grep "Python ")
          export python_arr=($python_line)
          export this_python=${python_arr[1]}
          if [[ "${this_python}" != "${COMPILED_PYTHON_VERSION}" ]]; then
            echo "ERROR: Tried to compile Python ${COMPILED_PYTHON_VERSION} but ended up with ${this_python}"
            exit 1
          fi
          export openssl_line=$(echo -e "${voutput}" | grep "OpenSSL ")
          export openssl_arr=($openssl_line)
          export this_openssl=${openssl_arr[1]}
          if [[ "${this_openssl}" != "${COMPILED_OPENSSL_VERSION}" ]]; then
            echo "ERROR: Tried to compile OpenSSL ${COMPILED_OPENSSL_VERSION} but ended up with ${this_openssl}"
            exit 1
          fi
          echo "We successfully compiled Python ${this_python} and OpenSSL ${this_openssl}"

      - name: Live API tests push only
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && github.repository_owner == 'GAM-team'
        env:
          PASSCODE: ${{ secrets.PASSCODE }}
        run: |
              export gyb_user="gyb-gha-${JID}@pdl.jaylee.us"
              export gyb_group="gyb-travis-group-${JID}@pdl.jaylee.us"
              source .github/actions/decrypt.sh .github/actions/creds.tar.gpg creds.tar
              $gyb --action check-service-account --email $gyb_user
              $gyb --action purge --email $gyb_user
              $gyb --action purge-labels --email $gyb_user
              $gyb --action restore --local-folder samples/gyb-format --email $gyb_user --cleanup
              $gyb --action restore --local-folder samples/gyb-format --email $gyb_user --service-account --noresume
              $gyb --action restore-group --local-folder samples/gyb-format --email $gyb_group --use-admin $gyb_user --cleanup --cleanup-from "God of Thunder <thor@avengers.com>"
              $gyb --action restore-group --local-folder samples/gyb-format --email $gyb_group --use-admin $gyb_user --service-account --noresume
              $gyb --action restore-group --local-folder samples/google-takeout --email $gyb_group --use-admin $gyb_user
              $gyb --action restore-group --local-folder samples/vault-export-mbox --email $gyb_group --use-admin $gyb_user --service-account
              $gyb --action restore-mbox --local-folder samples/historic-public-mbox --email $gyb_user --cleanup
              $gyb --action restore-mbox --local-folder samples/historic-public-mbox --email $gyb_user --service-account --noresume
              $gyb --action restore-mbox --local-folder samples/google-takeout --email $gyb_user --cleanup --cleanup-from  "God of Thunder <thor@avengers.com>"
              $gyb --action restore-mbox --local-folder samples/vault-export-mbox --email $gyb_user
              $gyb --action count --email $gyb_user
              $gyb --action count --email $gyb_user --service-account
              $gyb --action quota --email $gyb_user
              $gyb --action quota --email $gyb_user --service-account
              $gyb --action estimate --email $gyb_user
              $gyb --action estimate --email $gyb_user --service-account
              $gyb --action print-labels --email $gyb_user
              $gyb --action print-labels --email $gyb_user --service-account
              $gyb --action backup --email $gyb_user
              $gyb --action backup --email $gyb_user --service-account --local-folder sa-backup
              $gyb --action backup-chat --email $gyb_user

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') && matrix.goal == 'build'
        with:
          name: gyb-binaries-${{ env.OS }}-${{ env.arch }}-${{ matrix.jid }}
          path: |
            gyb*.tar.xz
            gyb*.zip
            gyb*.msi

      - name: Tar Cache archive
        if: matrix.goal == 'build' && steps.cache-python-ssl.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}
        run: |
          if [[ "${RUNNER_OS}" == "Windows" ]]; then
            tar_folder="cpython/ ssl/"
          else
            tar_folder="ssl/ python/"
          fi
          tar cJvvf cache.tar.xz $tar_folder


  merge:
    if: (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-24.04
    needs: build
    permissions:
      contents: write
      packages: write
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: gyb-binaries
          pattern: gyb-binaries-*

  publish:
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-24.04
    needs: merge
    permissions:
      contents: write
      packages: write
      pull-requests: read

    steps:

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # 5.0.0

      - name: VirusTotal Scan
        uses: crazy-max/ghaction-virustotal@d34968c958ae283fe976efed637081b9f9dcf74f # 4.2.0
        with:
          vt_api_key: ${{ secrets.VT_API_KEY }}
          files: |
            gyb-binaries/*

      - name: Set datetime version string
        id: dateversion
        run: |
          export dateversion="$(date  +'%Y%m%d.%H%M%S')"
          echo "Date version: ${dateversion}"
          echo "dateversion=${dateversion}" >> $GITHUB_OUTPUT

      - name: Publish draft release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # 2.3.2
        with:
          draft: true
          prerelease: false
          tag_name: "${{ steps.dateversion.outputs.dateversion }}"
          fail_on_unmatched_files: true
          files: |
            gyb-binaries/*
