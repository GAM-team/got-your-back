name: Build and test GYB

on:
  push:
  pull_request:
  schedule:
    - cron: '37 22 * * *'

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSION: "3.10"
  OPENSSL_VERSION: "openssl-3.0"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            jid: 1
            goal: "build"
          - os: macos-10.15
            jid: 2
            goal: "build"
          - os: windows-2022
            jid: 3
            goal: "build"
            python: "3.9" # needed for build
          - os: [self-hosted, linux, arm64]
            jid: 4
            goal: "self-build"
          - os: [self-hosted, linux, arm]
            jid: 9
            goal: "self-build"
          - os: ubuntu-20.04
            goal: "test"
            python: "3.6"
            jid: 5
          - os: ubuntu-20.04
            goal: "test"
            python: "3.7"
            jid: 6
          - os: ubuntu-20.04
            goal: "test"
            python: "3.8"
            jid: 7
          - os: ubuntu-20.04
            goal: "test"
            python: "3.9"
            jid: 8

    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Justin Blackmore
        id: jblackmore88@gmail.com
        uses: actions/cache@v2
        if: matrix.goal == 'build'
        with:
          path: |
            ~/ssl
            ~/openssl
            ~/python
            ~/cpython
          key: ${{ matrix.os }}-${{ matrix.jid }}-20211206-1

      - name: Use pre-compiled Python
        if: matrix.python != ''
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Set env variables for test and self-build
        if: matrix.goal != 'build'
        env:
          JID: ${{ matrix.jid }}
          ACTIONS_CACHE: ${{ steps.cache.outputs.cache-hit }}
          ACTIONS_GOAL: ${{ matrix.goal }}
        run: |
             whoami
             export python=$(which python3)
             export pip=$(which pip3)
             export gyb="${python} -m gyb"
             export gybpath="$(readlink -e .)"
             echo -e "python: $python\npip: $pip\ngyb: $gyb\ngybpath: $gybpath"
             echo "python=${python}" >> $GITHUB_ENV
             echo "pip=${pip}" >> $GITHUB_ENV
             echo "gyb=${gyb}" >> $GITHUB_ENV
             echo "gybpath=${gybpath}" >> $GITHUB_ENV
             echo "JID=${JID}" >> $GITHUB_ENV
             echo "ACTIONS_CACHE=${ACTIONS_CACHE}" >> $GITHUB_ENV
             echo "ACTIONS_GOAL=${ACTIONS_GOAL}" >> $GITHUB_ENV

      - name: Bash Env Variables
        if: matrix.goal == 'build'
        env:
          JID: ${{ matrix.jid }}
          ACTIONS_CACHE: ${{ steps.cache.outputs.cache-hit }}
          ACTIONS_GOAL: ${{ matrix.goal }}
        run: |
          cd "${HOME}"
          mkdir -p ssl
          mkdir -p python
          OPENSSL_INSTALL_DIR="${HOME}/ssl"
          OPENSSL_SOURCE_DIR="${HOME}/openssl"
          PYTHON_INSTALL_DIR="${HOME}/python"
          PYTHON_SOURCE_DIR="${HOME}/cpython"
          echo "OPENSSL_SOURCE_DIR=${OPENSSL_SOURCE_DIR}" >> $GITHUB_ENV
          echo "OPENSSL_INSTALL_DIR=${OPENSSL_INSTALL_DIR}" >> $GITHUB_ENV
          echo "PYTHON_SOURCE_DIR=${PYTHON_SOURCE_DIR}" >> $GITHUB_ENV
          echo "PYTHON_INSTALL_DIR=${PYTHON_INSTALL_DIR}" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=${OPENSSL_INSTALL_DIR}/lib:${PYTHON_INSTALL_DIR}/lib" >> $GITHUB_ENV
          echo "python=${PYTHON_INSTALL_DIR}/bin/python3" >> $GITHUB_ENV
          echo "JID=${JID}" >> $GITHUB_ENV
          echo "ACTIONS_CACHE=${ACTIONS_CACHE}" >> $GITHUB_ENV
          echo "ACTIONS_GOAL=${ACTIONS_GOAL}" >> $GITHUB_ENV

      - name: PowerShell Env Variables
        if: matrix.os == 'windows-2022' && matrix.goal == 'build'
        shell: powershell
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "PS_OPENSSL_INSTALL_DIR=$HOME\ssl"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_OPENSSL_SOURCE_DIR=$HOME\openssl"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_PYTHON_INSTALL_DIR=$HOME\python"
          Add-Content -Path $env:GITHUB_ENV -Value "PS_PYTHON_SOURCE_DIR=$HOME\cpython"
          Add-Content -Path $env:GITHUB_ENV -Value "PYTHON=$env:PYTHON_SOURCE_DIR/release/amd64/binaries/python.exe"

      - name: Download OpenSSL
        if: matrix.goal == 'build' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          git clone https://github.com/openssl/openssl.git
          cd openssl
          git checkout "${OPENSSL_VERSION}"

      - name: Unix Config OpenSSL
        if: matrix.goal == 'build' && matrix.os != 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          cd "${OPENSSL_SOURCE_DIR}"
          echo "MAKE=make" >> $GITHUB_ENV
          echo "OPENSSL_MAKE_OPTS=-j$(nproc)" >> $GITHUB_ENV
          ./Configure --libdir=lib --prefix="${OPENSSL_INSTALL_DIR}"

      - name: Windows Perl Install
        if: matrix.goal == 'build' && matrix.os == 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        uses: shogo82148/actions-setup-perl@v1

      - name: Windows Config OpenSSL
        if: matrix.goal == 'build' && matrix.os == 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          choco install nasm --no-progress
          $env:PATH="$ENV:PATH;c:\Program Files\NASM\"
          cmd /c 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && set MAKE=nmake && set > %temp%\vcvars.txt'
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
           if ($_ -match "^(.*?)=(.*)$") {
             Set-Content "env:\$($matches[1])" $matches[2]
             Add-Content -Path $env:GITHUB_ENV -Value "$($matches[1])=$($matches[2])"
           }
          }
          cd $env:PS_OPENSSL_SOURCE_DIR
          perl ./Configure VC-WIN64A --prefix="$env:PS_OPENSSL_INSTALL_DIR"

      - name: Rename GNU link on Windows
        if: matrix.goal == 'build' && matrix.os == 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        run: mv /usr/bin/link /usr/bin/gnulink

      - name: Make OpenSSL
        if: matrix.goal == 'build' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          $MAKE $OPENSSL_MAKE_OPTS

      - name: Install OpenSSL
        if: matrix.goal == 'build' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${OPENSSL_SOURCE_DIR}"
          $MAKE install

      - name: Run OpenSSL
        if: matrix.goal == 'build'
        run: |
          "${OPENSSL_INSTALL_DIR}/bin/openssl" version

      - name: Download Python
        if: matrix.goal == 'build' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${HOME}"
          git clone https://github.com/python/cpython.git
          cd cpython
          PYTHON_SOURCE_DIR=$(pwd)
          git checkout "${PYTHON_VERSION}"
          echo "PYTHON_SOURCE_DIR=${PYTHON_SOURCE_DIR}" >> $GITHUB_ENV

      - name: Mac/Linux Configure Python
        if: matrix.goal == 'build' && matrix.os != 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        run: |
          export PYTHON_INSTALL_DIR="${HOME}/python"
          mkdir -p "${PYTHON_INSTALL_DIR}"
          echo "PYTHON_INSTALL_DIR=${PYTHON_INSTALL_DIR}" >> $GITHUB_ENV
          cd "${PYTHON_SOURCE_DIR}"
          ./configure --with-openssl="${OPENSSL_INSTALL_DIR}" \
                      --prefix="${PYTHON_INSTALL_DIR}" \
                      --enable-shared \
                      --with-ensurepip=upgrade \
                      --enable-optimizations \
                      --with-lto

      - name: Windows Config/Build/Install Python
        if: matrix.goal == 'build' && matrix.os == 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd $env:PS_PYTHON_SOURCE_DIR
          $env:PYTHON = (gcm python).Path
          $env:PIP = (gcm pip).Path
          $env:PYTHONPATH = Resolve-Path -Path $env:PYTHON\..
          echo "PYTHONPATH: $env:PYTHONPATH"
          Invoke-Expression "$env:PYTHON -V"
          Invoke-Expression "$env:PIP install --upgrade --user pip"
          Invoke-Expression "$env:PIP install --upgrade --user sphinx"
          $env:SPHINXBUILD = (gcm sphinx-build).Path
          echo "Sphinx Build location: $env:SPHINXBUILD"
          Invoke-Expression "$env:SPHINXBUILD --version"
          Add-Content -Path $env:GITHUB_ENV -Value "SPHINXBUILD=${env:SPHINXBUILD}"
          $env:DefaultWindowsSDKVersion = "10.0.20348.0"
          PCBuild\get_externals.bat
          echo "delete..."
          Get-ChildItem -Path externals\openssl-bin-1.1.1l\amd64\ -Include *.* -File -Recurse | foreach { $_.Delete()}
          echo "copy..."
          cp "$HOME\ssl\lib\*" externals\openssl-bin-1.1.1l\amd64\
          cp "$HOME\ssl\bin\*" externals\openssl-bin-1.1.1l\amd64\
          echo "ls afterwards..."
          ls externals\openssl-bin-1.1.1l\amd64
          echo "ssl/include"
          gci -r -Path "$HOME/ssl/include" | select -exp FullName
          cp "$HOME\ssl\include\openssl\*" externals\openssl-bin-1.1.1l\amd64\include\openssl\
          cp "$HOME\ssl\include\openssl\applink.c" externals\openssl-bin-1.1.1l\amd64\include\
          echo "INCLUDE OPENSSL"
          gci -r -Path externals\openssl-bin-1.1.1l\amd64\include\openssl\ | select -exp FullName
          cp "$env:GITHUB_WORKSPACE/openssl.props" PCBuild\
          gci -r -Path PCBuild\ | select -exp FullName
          Tools\msi\buildrelease.bat -x64 --out release --skip-msi --skip-nuget
          echo "In release:"
          dir release\
          dir release\amd64\
          dir release\amd64\binaries\
          $env:python = Resolve-Path -Path release\amd64\binaries\python.exe
          Add-Content -Path $env:GITHUB_ENV -Value "python=${env:python}"

      - name: Mac/Linux Build Python
        if: matrix.goal == 'build' && matrix.os != 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          $MAKE -j$(nproc)
          
      - name: Mac/Linux Install Python
        if: matrix.goal == 'build' && matrix.os != 'windows-2022' && steps.cache.outputs.cache-hit != 'true'
        run: |
          cd "${PYTHON_SOURCE_DIR}"
          $MAKE install

      - name: Run Python
        run: |
          "${python}" -V
          
      - name: Install PIP
        if: matrix.goal != 'test'
        run: |
          curl -O https://bootstrap.pypa.io/get-pip.py
          "${python}" get-pip.py
          pip="${python} -m pip"
          echo "pip=${pip}" >> $GITHUB_ENV
          "${python}" -m pip install --upgrade pip
          "${python}" -m pip install --upgrade setuptools
          
      - name: Install PyInstaller
        if: matrix.goal != 'test'
        run: |
          git clone https://github.com/pyinstaller/pyinstaller
          cd pyinstaller
          ls -alRF PyInstaller/bootloader
          rm -rf PyInstaller/bootloader/*bit
          cd bootloader
          $python ./waf all
          cd ..
          $python -m pip install .
          echo "pyinstaller=${python} -OO -m PyInstaller" >> $GITHUB_ENV

      - name: Install pip requirements
        run: |
             set +e
             $pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 $pip install -U --force-reinstall
             $pip install --upgrade -r requirements.txt

      - name: Build GYB with PyInstaller
        if: matrix.goal != 'test'
        run: |
             $pyinstaller --clean --noupx --strip --onefile --distpath=gyb gyb.spec
             if [ -x "$(command -v realpath)" ]; then
               realpath=realpath
             else
               brew install coreutils
               realpath=grealpath
             fi
             echo "gybpath=$(${realpath} ./gyb/)" >> $GITHUB_ENV
             echo "gyb=$(${realpath} ./gyb/gyb)" >> $GITHUB_ENV
             echo -e "GYB: ${gyb}\nGYBPATH: ${gybpath}"

      - name: Basic Tests all jobs
        run: |
             echo -e "python: $python\npip: $pip\ngyb: $gyb\ngybpath: $gybpath\n"
             touch "${gybpath}/nobrowser.txt"
             $gyb --version
             export GYBVERSION=$($gyb --short-version )
             echo "GYB Version ${GYBVERSION}"
             echo "GYBVERSION=${GYBVERSION}" >> $GITHUB_ENV
             if [ -d "gyb" ]; then
               cp LICENSE gyb/
             fi
             rm -f "${gybpath}/nobrowser.txt"
             rm -f "${gybpath}/lastcheck.txt"

      - name: Linux package GYB
        if: matrix.os != 'windows-2022' && matrix.os != 'macos-10.15' && matrix.goal != 'test'
        run: |
          this_glibc_ver=$(ldd --version | awk '/ldd/{print $NF}')
          GYB_ARCHIVE="gyb-${GYBVERSION}-linux-$(arch)-glibc${this_glibc_ver}.tar.xz"
          tar cfJ $GYB_ARCHIVE gyb/

      - name: Linux install patchelf/staticx
        if: matrix.os == 'ubuntu-20.04' && matrix.goal != 'test'
        run: |
          $pip install --upgrade patchelf-wrapper
          $pip install --upgrade staticx

      - name: Linux Make Static GYB
        if: matrix.os == 'ubuntu-20.04' && matrix.goal != 'test'
        run: |
          $python -m staticx gyb/gyb gyb/gyb-staticx
          
      - name: Linux Run StaticX-ed GYB
        if: matrix.os == 'ubuntu-20.04' && matrix.goal != 'test'
        run: |
          gyb/gyb-staticx --version
          mv gyb/gyb-staticx gyb/gyb

      - name: Linux package staticx GYB
        if: matrix.os == 'ubuntu-20.04' && matrix.goal != 'test'
        run: |
          GYB_ARCHIVE="gyb-${GYBVERSION}-linux-x86_64-legacy.tar.xz"
          tar cfJ $GYB_ARCHIVE gyb/

      - name: MacOS package GYB
        if: matrix.os == 'macos-10.15' && matrix.goal != 'test'
        run: |
          MACOSVERSION=$(defaults read loginwindow SystemVersionStampAsString)
          GYB_ARCHIVE="gyb-${GYBVERSION}-macos-x86_64-MacOS${MACOSVERSION}.tar.xz"
          tar cfJ $GYB_ARCHIVE gyb/

      - name: Windows package GYB
        if: matrix.os == 'windows-2022' && matrix.goal != 'test'
        run: |
          cp gyb-setup.bat gyb
          GYB_ARCHIVE=gyb-$GYBVERSION-windows-x86_64.zip
          /c/Program\ Files/7-Zip/7z.exe a -tzip $GYB_ARCHIVE gyb -xr!.svn
          mkdir gyb-64
          cp -rf gyb/* gyb-64/;
          /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/candle.exe -arch x64 windows-gyb.wxs
          /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/light.exe -ext /c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin/WixUIExtension.dll windows-gyb.wixobj -o gyb-$GYBVERSION-windows-x86_64.msi || true;
          rm -f *.wixpdb

      - name: Basic Tests build jobs only
        if: matrix.goal != 'test'
        run: |
             export vline=$($gyb --version | grep "Python ")
             export python_line=($vline)
             export this_python=${python_line[1]}
             $pip install packaging
             $python tools/a_atleast_b.py "${this_python}" "${PYTHON_VERSION}"
             export vline=$($gyb --version | grep "OpenSSL ")
             export openssl_line=($vline)
             export this_openssl="${openssl_line[1]}"
             $python tools/a_atleast_b.py "${this_openssl}" "${OPENSSL_VERSION}"

      - name: Live API tests push only
        if: (github.event_name == 'push' || github.event_name == 'schedule') && github.repository_owner == 'jay0lee'
        env:
          PASSCODE: ${{ secrets.justme88j$!}}
        run: |
              export gyb_justin blackmore="gyb-gha-${JID}@pdl.jaylee.us"
              export gyb_group="gyb-travis-group-${JID}@pdl.jaylee.us"
              source .github/actions/decrypt.sh .github/actions/creds.tar.gpg creds.tar
              $gyb --action check-service-account --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action purge --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action purge-labels --jblackmore88@gmail.com $gyb_user
              $gyb --action restore --inbox-folder samples/gyb-format --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action restore --inbox-folder samples/gyb-format --jblackmore88@gmail.com $gyb_user --service-account --noresume
              $gyb --action restore-group --inbox-folder samples/gyb-format --jblackmore88@gmail.com $gyb_group --use-admin $gyb_justin Blackmore
              $gyb --action restore-group --inbox-folder samples/gyb-format --jblackmore88@gmail.com $gyb_group --use-admin $gyb_Justin Blackmore --jblackmore88@gmail.com --noresume
              $gyb --action restore-group --inbox-folder samples/google-takeout --jblackmore88@gmail.com $gyb_group --use-admin $gyb_justin blackmore
              $gyb --action restore-group --inbox-folder samples/vault-export-mbox --jblackmore88@gmail.com $gyb_group --use-admin $gyb_Justin Blackmore --jblackmore88@gmail.com
              $gyb --action restore-mbox --inbox-folder samples/historic-public-mbox --email $gyb_user
              $gyb --action restore-mbox --inbox-folder samples/historic-public-mbox -- Jblackmore88@gmail.com $gyb_user --jblackmore88@gmail.com --noresume
              $gyb --action restore-mbox --inbox-folder samples/google-takeout --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action restore-mbox --inbox-folder samples/vault-export-inbox --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action count --jblackmore88@gmail.com $gyb_Justin Blackmore
              $gyb --action count --jblackmore88@gmail.com $gyb_user --jblackmore88@gmail.com
              $gyb --action quota --jblackmore88@gmail.com $gyb_justin Blackmore
              $gyb --action quota --jblackmore88@gmail.com $gyb_justin Blackmore--gmail/inbox
              $gyb --action estimate --jblackmore88@gmail.com $gyb_user Justin Blackmore
              $gyb --action estimate --jblackmore88@gmail.com $gyb_user Justin Blackmore
              $gyb --action print-labels --jblackmore88@gmail.com $gyb_user
              $gyb --action print-labels --jblackmore88@gmail.com $gyb_user --jblackmore88@gmail.com
              $gyb --action backup --jblackmore88@gmail $gyb_justin Blackmore
              $gyb --action backup --jblackmore88@gmail.com $gyb_jblackmore88@gmail.com --service-account --local-folder sa-backup

      - name: Upload to Google Drive, build only.
        if: github.event_justin Blackmore== 'push' && matrix.goal == 'build' && github.repository_owner == 'jay0lee'
        env:
          GHCLIENT: ${{ secrets.jblackmore88@gmail.com }}
        run: |
              # Use GAM to upload archive to Drive
              bash <(curl -s -S -L https://git.io/install-gam) -l
              for gybfile in gyb-$GYBVERSION-*; do
                echo "Uploading file ${gybfile} to Google Drive..."
                export OAUTHSERVICEFILE="${gybpath}/oauth2service.json"
                fileid=$(~/bin/gam/gam jblackmore88@gmail.com gyb-project-cp6-xqa-vk3@gyb-project-cp6-xqa-vk3.iam.gserviceaccount.com add drivefile localfile $gybfile drivefilename $GYBVERSION-${GITHUB_SHA:0:7}-$gybfile parentid 1nM76gFy3aW1orENiyJGW1v4wmtoNAkQO returnidonly)
                echo "file uploaded as ${fileid}, setting ACL..."
                ~/bin/gam/gam jblackmore88@gmail.com gyb-project-cp6-xqa-vk3@gyb-project-cp6-xqa-vk3.iam.gserviceaccount.com add drivefileacl $fileid anyone role reader withlink
              done

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name == 'push' && matrix.goal != 'test'
        with:
          name: gyb-binaries
          path: |
            *.tar.xz
            *.zip
            *.msi
